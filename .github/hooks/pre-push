#!/bin/sh

#################### 공통 스크립트 ####################

# 푸시를 실행한 원격 이름과 URL 읽어오기
remote_name=$1
remote_url=$2

# 현재 브랜치 확인
current_branch=$(git rev-parse --abbrev-ref HEAD)

# 원격 브랜치 존재 여부 확인
if git rev-parse --verify origin/$current_branch > /dev/null 2>&1; then
  files=$(git diff --name-only origin/$current_branch)
else
  echo "[pre-push] ⚠️ No remote branch found. Comparing with 'origin/dev'."
  files=$(git diff --name-only origin/dev)
fi

# 프론트엔드 파일 필터링
# info) sed ... : 파일 경로에서 frontend/ 제거
frontend_files=$(echo "$files" | grep -E "^frontend/" | sed 's|^frontend/||')
# 백엔드 파일 필터링
backend_files=$(echo "$files" | grep -E "^backend/" | sed 's|^backend/||')

# 정규식 - 브랜치 네이밍 검사
branch_name_regex="^(feature|refactor|bugfix)/(fe|be|all)/[a-z0-9-]+$"

echo "[pre-push] ⏳ Validating changes before pushing to $remote_name ... ($remote_url)"

if ! echo "$current_branch" | grep -Eq "$branch_name_regex"; then
  echo "[pre-push] ❌ Invalid branch name: $current_branch"
  echo "[pre-push] Branch name must match the following pattern: "
  echo "[pre-push] <tag>/<fe|be|all>/..."
  exit 1
fi

# 브랜치에서 fe|be 부분만 추출
part=$(echo "$current_branch" | cut -d'/' -f2)


#################### 프론트엔드 스크립트 ####################

if [ "$part" = "fe" ]; then
  # pnpm 실행을 위해 frontend 폴더로 이동
  cd frontend

  # pnpm run build 성공 여부 검사
  if ! pnpm run build; then
    echo "[pre-push] ❌ Error: Build failed. Push aborted."
    exit 1
  fi
  # # pnpm run test 성공 여부 검사
  # if ! pnpm run test; then
  #   echo "[pre-push] ❌ Tests failed. Push aborted."
  #   exit 1
  # fi
  
  # # 민감한 정보 패턴 검사 (credentials, API keys, etc.)
  # sensitive_patterns="(AWS_ACCESS_KEY_ID|SECRET|PASSWORD)"
  # if git diff --cached | grep -E "$sensitive_patterns"; then
  #   echo "[pre-push] ❌ Sensitive information detected in changes. Push aborted."
  #   exit 1
  # fi
fi

#################### 백엔드 스크립트 ####################

if [ "$part" = "be" ]; then
  cd backend

  echo "[pre-push] ⏳ Running backend build with Spring Profile '$SPRING_PROFILE'..."

  # 기본 프로파일 설정 (환경변수 SPRING_PROFILE이 설정되지 않은 경우 local 로 설정)
  SPRING_PROFILE=${SPRING_PROFILE:local}

  # Gradle 빌드 실행 (테스트 제외)
  if ! ./gradlew build -x test -P spring.profiles.active=$SPRING_PROFILE; then
    echo "[pre-push] ❌ Backend build failed with profile '$SPRING_PROFILE'. Push aborted."
    exit 1
  fi

  echo "[pre-push] ✅ Backend build succeeded with profile '$SPRING_PROFILE'."

  # 테스트 실행
  if ! ./gradlew test -P spring.profiles.active=$SPRING_PROFILE; then
    echo "[pre-push] ❌ Backend tests failed with profile '$SPRING_PROFILE'. Push aborted."
    exit 1
  fi

  echo "[pre-push] ✅ Backend tests passed with profile '$SPRING_PROFILE'."

  # # 민감한 정보 패턴 검사 (AWS 키, 비밀번호, 토큰 등)
  # sensitive_patterns="(AWS_ACCESS_KEY_ID|SECRET|PASSWORD|TOKEN)"
  # if git diff --cached | grep -E "$sensitive_patterns"; then
  #   echo "[pre-push] ❌ Sensitive information detected in changes. Push aborted."
  #   exit 1
  # fi
fi



#################### 성공 분기 ####################

echo "[pre-push] ✅ Validation successful. Proceeding with push."
echo ""

exit 0
