/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as MainImport } from './routes/_main'
import { Route as IndexImport } from './routes/index'
import { Route as LandingIndexImport } from './routes/landing/index'
import { Route as OauthRedirectIndexImport } from './routes/oauth.redirect/index'
import { Route as MainDiscussionIdImport } from './routes/_main/discussion/$id'
import { Route as MainDiscussionCreateIndexImport } from './routes/_main/discussion/create/index'
import { Route as MainDiscussionInviteIdImport } from './routes/_main/discussion/invite/$id'
import { Route as MainDiscussionEditIdImport } from './routes/_main/discussion/edit/$id'
import { Route as MainDiscussionCreateIdImport } from './routes/_main/discussion/create/$id'

// Create Virtual Routes

const LoginIndexLazyImport = createFileRoute('/login/')()
const MainUpcomingScheduleIndexLazyImport = createFileRoute(
  '/_main/upcoming-schedule/',
)()
const MainMyCalendarIndexLazyImport = createFileRoute('/_main/my-calendar/')()
const MainHomeIndexLazyImport = createFileRoute('/_main/home/')()

// Create/Update Routes

const MainRoute = MainImport.update({
  id: '/_main',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const LoginIndexLazyRoute = LoginIndexLazyImport.update({
  id: '/login/',
  path: '/login/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/login/index.lazy').then((d) => d.Route))

const LandingIndexRoute = LandingIndexImport.update({
  id: '/landing/',
  path: '/landing/',
  getParentRoute: () => rootRoute,
} as any)

const MainUpcomingScheduleIndexLazyRoute =
  MainUpcomingScheduleIndexLazyImport.update({
    id: '/upcoming-schedule/',
    path: '/upcoming-schedule/',
    getParentRoute: () => MainRoute,
  } as any).lazy(() =>
    import('./routes/_main/upcoming-schedule/index.lazy').then((d) => d.Route),
  )

const MainMyCalendarIndexLazyRoute = MainMyCalendarIndexLazyImport.update({
  id: '/my-calendar/',
  path: '/my-calendar/',
  getParentRoute: () => MainRoute,
} as any).lazy(() =>
  import('./routes/_main/my-calendar/index.lazy').then((d) => d.Route),
)

const MainHomeIndexLazyRoute = MainHomeIndexLazyImport.update({
  id: '/home/',
  path: '/home/',
  getParentRoute: () => MainRoute,
} as any).lazy(() =>
  import('./routes/_main/home/index.lazy').then((d) => d.Route),
)

const OauthRedirectIndexRoute = OauthRedirectIndexImport.update({
  id: '/oauth/redirect/',
  path: '/oauth/redirect/',
  getParentRoute: () => rootRoute,
} as any)

const MainDiscussionIdRoute = MainDiscussionIdImport.update({
  id: '/discussion/$id',
  path: '/discussion/$id',
  getParentRoute: () => MainRoute,
} as any)

const MainDiscussionCreateIndexRoute = MainDiscussionCreateIndexImport.update({
  id: '/discussion/create/',
  path: '/discussion/create/',
  getParentRoute: () => MainRoute,
} as any)

const MainDiscussionInviteIdRoute = MainDiscussionInviteIdImport.update({
  id: '/discussion/invite/$id',
  path: '/discussion/invite/$id',
  getParentRoute: () => MainRoute,
} as any)

const MainDiscussionEditIdRoute = MainDiscussionEditIdImport.update({
  id: '/discussion/edit/$id',
  path: '/discussion/edit/$id',
  getParentRoute: () => MainRoute,
} as any)

const MainDiscussionCreateIdRoute = MainDiscussionCreateIdImport.update({
  id: '/discussion/create/$id',
  path: '/discussion/create/$id',
  getParentRoute: () => MainRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/_main': {
      id: '/_main'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof MainImport
      parentRoute: typeof rootRoute
    }
    '/landing/': {
      id: '/landing/'
      path: '/landing'
      fullPath: '/landing'
      preLoaderRoute: typeof LandingIndexImport
      parentRoute: typeof rootRoute
    }
    '/login/': {
      id: '/login/'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginIndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/_main/discussion/$id': {
      id: '/_main/discussion/$id'
      path: '/discussion/$id'
      fullPath: '/discussion/$id'
      preLoaderRoute: typeof MainDiscussionIdImport
      parentRoute: typeof MainImport
    }
    '/oauth/redirect/': {
      id: '/oauth/redirect/'
      path: '/oauth/redirect'
      fullPath: '/oauth/redirect'
      preLoaderRoute: typeof OauthRedirectIndexImport
      parentRoute: typeof rootRoute
    }
    '/_main/home/': {
      id: '/_main/home/'
      path: '/home'
      fullPath: '/home'
      preLoaderRoute: typeof MainHomeIndexLazyImport
      parentRoute: typeof MainImport
    }
    '/_main/my-calendar/': {
      id: '/_main/my-calendar/'
      path: '/my-calendar'
      fullPath: '/my-calendar'
      preLoaderRoute: typeof MainMyCalendarIndexLazyImport
      parentRoute: typeof MainImport
    }
    '/_main/upcoming-schedule/': {
      id: '/_main/upcoming-schedule/'
      path: '/upcoming-schedule'
      fullPath: '/upcoming-schedule'
      preLoaderRoute: typeof MainUpcomingScheduleIndexLazyImport
      parentRoute: typeof MainImport
    }
    '/_main/discussion/create/$id': {
      id: '/_main/discussion/create/$id'
      path: '/discussion/create/$id'
      fullPath: '/discussion/create/$id'
      preLoaderRoute: typeof MainDiscussionCreateIdImport
      parentRoute: typeof MainImport
    }
    '/_main/discussion/edit/$id': {
      id: '/_main/discussion/edit/$id'
      path: '/discussion/edit/$id'
      fullPath: '/discussion/edit/$id'
      preLoaderRoute: typeof MainDiscussionEditIdImport
      parentRoute: typeof MainImport
    }
    '/_main/discussion/invite/$id': {
      id: '/_main/discussion/invite/$id'
      path: '/discussion/invite/$id'
      fullPath: '/discussion/invite/$id'
      preLoaderRoute: typeof MainDiscussionInviteIdImport
      parentRoute: typeof MainImport
    }
    '/_main/discussion/create/': {
      id: '/_main/discussion/create/'
      path: '/discussion/create'
      fullPath: '/discussion/create'
      preLoaderRoute: typeof MainDiscussionCreateIndexImport
      parentRoute: typeof MainImport
    }
  }
}

// Create and export the route tree

interface MainRouteChildren {
  MainDiscussionIdRoute: typeof MainDiscussionIdRoute
  MainHomeIndexLazyRoute: typeof MainHomeIndexLazyRoute
  MainMyCalendarIndexLazyRoute: typeof MainMyCalendarIndexLazyRoute
  MainUpcomingScheduleIndexLazyRoute: typeof MainUpcomingScheduleIndexLazyRoute
  MainDiscussionCreateIdRoute: typeof MainDiscussionCreateIdRoute
  MainDiscussionEditIdRoute: typeof MainDiscussionEditIdRoute
  MainDiscussionInviteIdRoute: typeof MainDiscussionInviteIdRoute
  MainDiscussionCreateIndexRoute: typeof MainDiscussionCreateIndexRoute
}

const MainRouteChildren: MainRouteChildren = {
  MainDiscussionIdRoute: MainDiscussionIdRoute,
  MainHomeIndexLazyRoute: MainHomeIndexLazyRoute,
  MainMyCalendarIndexLazyRoute: MainMyCalendarIndexLazyRoute,
  MainUpcomingScheduleIndexLazyRoute: MainUpcomingScheduleIndexLazyRoute,
  MainDiscussionCreateIdRoute: MainDiscussionCreateIdRoute,
  MainDiscussionEditIdRoute: MainDiscussionEditIdRoute,
  MainDiscussionInviteIdRoute: MainDiscussionInviteIdRoute,
  MainDiscussionCreateIndexRoute: MainDiscussionCreateIndexRoute,
}

const MainRouteWithChildren = MainRoute._addFileChildren(MainRouteChildren)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '': typeof MainRouteWithChildren
  '/landing': typeof LandingIndexRoute
  '/login': typeof LoginIndexLazyRoute
  '/discussion/$id': typeof MainDiscussionIdRoute
  '/oauth/redirect': typeof OauthRedirectIndexRoute
  '/home': typeof MainHomeIndexLazyRoute
  '/my-calendar': typeof MainMyCalendarIndexLazyRoute
  '/upcoming-schedule': typeof MainUpcomingScheduleIndexLazyRoute
  '/discussion/create/$id': typeof MainDiscussionCreateIdRoute
  '/discussion/edit/$id': typeof MainDiscussionEditIdRoute
  '/discussion/invite/$id': typeof MainDiscussionInviteIdRoute
  '/discussion/create': typeof MainDiscussionCreateIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '': typeof MainRouteWithChildren
  '/landing': typeof LandingIndexRoute
  '/login': typeof LoginIndexLazyRoute
  '/discussion/$id': typeof MainDiscussionIdRoute
  '/oauth/redirect': typeof OauthRedirectIndexRoute
  '/home': typeof MainHomeIndexLazyRoute
  '/my-calendar': typeof MainMyCalendarIndexLazyRoute
  '/upcoming-schedule': typeof MainUpcomingScheduleIndexLazyRoute
  '/discussion/create/$id': typeof MainDiscussionCreateIdRoute
  '/discussion/edit/$id': typeof MainDiscussionEditIdRoute
  '/discussion/invite/$id': typeof MainDiscussionInviteIdRoute
  '/discussion/create': typeof MainDiscussionCreateIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/_main': typeof MainRouteWithChildren
  '/landing/': typeof LandingIndexRoute
  '/login/': typeof LoginIndexLazyRoute
  '/_main/discussion/$id': typeof MainDiscussionIdRoute
  '/oauth/redirect/': typeof OauthRedirectIndexRoute
  '/_main/home/': typeof MainHomeIndexLazyRoute
  '/_main/my-calendar/': typeof MainMyCalendarIndexLazyRoute
  '/_main/upcoming-schedule/': typeof MainUpcomingScheduleIndexLazyRoute
  '/_main/discussion/create/$id': typeof MainDiscussionCreateIdRoute
  '/_main/discussion/edit/$id': typeof MainDiscussionEditIdRoute
  '/_main/discussion/invite/$id': typeof MainDiscussionInviteIdRoute
  '/_main/discussion/create/': typeof MainDiscussionCreateIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | ''
    | '/landing'
    | '/login'
    | '/discussion/$id'
    | '/oauth/redirect'
    | '/home'
    | '/my-calendar'
    | '/upcoming-schedule'
    | '/discussion/create/$id'
    | '/discussion/edit/$id'
    | '/discussion/invite/$id'
    | '/discussion/create'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | ''
    | '/landing'
    | '/login'
    | '/discussion/$id'
    | '/oauth/redirect'
    | '/home'
    | '/my-calendar'
    | '/upcoming-schedule'
    | '/discussion/create/$id'
    | '/discussion/edit/$id'
    | '/discussion/invite/$id'
    | '/discussion/create'
  id:
    | '__root__'
    | '/'
    | '/_main'
    | '/landing/'
    | '/login/'
    | '/_main/discussion/$id'
    | '/oauth/redirect/'
    | '/_main/home/'
    | '/_main/my-calendar/'
    | '/_main/upcoming-schedule/'
    | '/_main/discussion/create/$id'
    | '/_main/discussion/edit/$id'
    | '/_main/discussion/invite/$id'
    | '/_main/discussion/create/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  MainRoute: typeof MainRouteWithChildren
  LandingIndexRoute: typeof LandingIndexRoute
  LoginIndexLazyRoute: typeof LoginIndexLazyRoute
  OauthRedirectIndexRoute: typeof OauthRedirectIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  MainRoute: MainRouteWithChildren,
  LandingIndexRoute: LandingIndexRoute,
  LoginIndexLazyRoute: LoginIndexLazyRoute,
  OauthRedirectIndexRoute: OauthRedirectIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/_main",
        "/landing/",
        "/login/",
        "/oauth/redirect/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/_main": {
      "filePath": "_main.tsx",
      "children": [
        "/_main/discussion/$id",
        "/_main/home/",
        "/_main/my-calendar/",
        "/_main/upcoming-schedule/",
        "/_main/discussion/create/$id",
        "/_main/discussion/edit/$id",
        "/_main/discussion/invite/$id",
        "/_main/discussion/create/"
      ]
    },
    "/landing/": {
      "filePath": "landing/index.tsx"
    },
    "/login/": {
      "filePath": "login/index.lazy.tsx"
    },
    "/_main/discussion/$id": {
      "filePath": "_main/discussion/$id.tsx",
      "parent": "/_main"
    },
    "/oauth/redirect/": {
      "filePath": "oauth.redirect/index.tsx"
    },
    "/_main/home/": {
      "filePath": "_main/home/index.lazy.tsx",
      "parent": "/_main"
    },
    "/_main/my-calendar/": {
      "filePath": "_main/my-calendar/index.lazy.tsx",
      "parent": "/_main"
    },
    "/_main/upcoming-schedule/": {
      "filePath": "_main/upcoming-schedule/index.lazy.tsx",
      "parent": "/_main"
    },
    "/_main/discussion/create/$id": {
      "filePath": "_main/discussion/create/$id.tsx",
      "parent": "/_main"
    },
    "/_main/discussion/edit/$id": {
      "filePath": "_main/discussion/edit/$id.tsx",
      "parent": "/_main"
    },
    "/_main/discussion/invite/$id": {
      "filePath": "_main/discussion/invite/$id.tsx",
      "parent": "/_main"
    },
    "/_main/discussion/create/": {
      "filePath": "_main/discussion/create/index.tsx",
      "parent": "/_main"
    }
  }
}
ROUTE_MANIFEST_END */
